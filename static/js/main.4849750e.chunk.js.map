{"version":3,"sources":["util/helpers.ts","components/fretboard/NoteLabel.tsx","components/fretboard/constants.ts","components/fretboard/Fretboard.tsx","hooks/useTimer.tsx","features/OneNoteADay.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["formatEnharmonicNote","note","acc","asNote","enharmonic","pc","generateNoteInput","stringNum","compareNoteInput","result","name","baseName","freq","octave","oct","status","pad","num","slice","convertToHHMMSS","secs","seconds","minutes","Math","floor","hours","MIDI_SOUND_SCALE_MAP","C","Db","D","Eb","E","F","Gb","G","Ab","A","Bb","B","getMIDISoundPitchNumber","hasOwnProperty","undefined","console","error","StyledLabelGroup","styled","g","props","showOnHover","show","createTonalNotesMap","tuning","numOfFrets","map","stringNote","tuningIdx","interval","Interval","fromSemitones","lastNoteOnString","transposeBy","Range","chromatic","sharps","Tonal","reverse","NoteLabel","showLabelText","notesToShow","handleNoteClick","useState","noteLabelMap","setNoteLabelMap","refContainer","useRef","useEffect","notesToShowMap","forEach","cur","ref","instruments","strNotes","strNotesIdx","strNum","labelVBPositionCy","fretNum","labelVBPositionCx","FRETBOARD_TOP_VB_WIDTH","noteDisplay","notesToShowKey","labelColor","onClick","current","playStrumDownNow","key","cx","cy","r","fill","stroke","x","y","textAnchor","alignmentBaseline","fontSize","FRETBOARD_VB_PADDING","Fret","xOffset","fretMarker","fretLabel","includes","FRET_VB_WIDTH","FRET_VB_HEIGHT","id","width","height","strokeWidth","TuningLabel","labels","labelVBPositionY","Fretboard","fretboardVBWidth","frets","i","push","strings","curStringWidth","xmlns","viewBox","useTimer","initTimeRemaining","autoStart","timeRemaining","setTimeRemaining","intervalId","setIntervalId","setupInterval","start","Date","now","setInterval","dt","clearInterval","ceil","resume","pause","restart","STANDARD_TUNING","PageContainer","div","PageTitle","h1","ExerciseRow","centered","ExerciseInfoEntryTitle","h3","ExerciseInfoEntry","title","content","ExerciseButton","button","OneNoteADay","noteForToday","setNoteForToday","exercise","setExercise","exampleTest","maxOccurrence","Object","values","reduce","inverseOccurrenceMap","entries","val","curDate","rngVal","seedrandom","toLocaleDateString","quick","allNotes","noteWithOctave","totalExercisesCompleted","curVal","pickNoteForToday","parsedNote","split","length","tuningNote","semitonesFromNote","distance","semitones","nextNote","transpose","concat","generateExercise","exerciseMode","setExerciseMode","exerciseIdx","setExerciseIdx","setNotesToShow","roundsCompleted","setRoundsCompleted","runningAvg","totalAnswers","prevTime","bufferedTime","avgResponseTimeObj","setAvgResponseTimeObj","newAvgResponseTimeObj","assign","errors","setErrors","numOfErrors","noteInput","curExerciseNoteInput","gradedNoteInput","idx","em","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sUAIMA,EAAuB,SAACC,GAC5B,MAAiB,MAAbA,EAAKC,IACD,GAAN,OAAUC,IAAOC,WAAWH,EAAKI,IAAjC,YAAwCJ,EAAKI,IAE9B,MAAbJ,EAAKC,IACD,GAAN,OAAUD,EAAKI,GAAf,YAAqBF,IAAOC,WAAWH,EAAKI,KAEvCJ,EAAKI,IAGRC,EAAoB,SACxBL,EACAM,GAEe,IADfC,EACc,uDADuB,KAE/BC,EAAoB,CACxBC,KAAMV,EAAqBC,GAC3BU,SAAUV,EAAKS,KACfE,KAAMX,EAAKW,KACXC,OAAQZ,EAAKa,IACbP,UAAWA,GAYb,OATyB,OAArBC,IACFC,EAAOM,OACLN,EAAOC,OAASF,EAAiBE,MACjCD,EAAOF,YAAcC,EAAiBD,WACtCE,EAAOI,SAAWL,EAAiBK,OAC/B,UACA,SAGDJ,GAGT,SAASO,EAAIC,GACX,OAAQ,IAAMA,GAAKC,OAAO,GAG5B,IAAMC,EAAkB,SAACC,GACvB,IAAMC,EAAUD,EAAO,GACjBE,EAAUC,KAAKC,MAAMJ,EAAO,IAAM,GAClCK,EAAQF,KAAKC,MAAMJ,EAAO,MAChC,MAAM,GAAN,OAAUK,EAAQ,EAAK,UAAAA,GAAS,IAASA,EAAcT,EAAIS,GAApC,KAAiD,IAAxE,OAA6ET,EAAIM,GAAjF,YAA6FN,EAAIK,KAG7FK,EAAmD,CACvDC,EAAG,EACH,KAAM,EACNC,GAAI,EACJC,EAAG,EACH,KAAM,EACNC,GAAI,EACJC,EAAG,EACHC,EAAG,EACH,KAAM,EACNC,GAAI,EACJC,EAAG,EACH,KAAM,EACNC,GAAI,EACJC,EAAG,EACH,KAAM,GACNC,GAAI,GACJC,EAAG,IAGCC,EAA0B,SAACtC,GAC/B,OAAKyB,EAAqBc,eAAevC,EAAKI,IAGtB,OAAbJ,EAAKa,UAA6B2B,IAAbxC,EAAKa,KACnC4B,QAAQC,MAAM,6BACP,IAEF,GAAK1C,EAAKa,IAAMY,EAAqBzB,EAAKI,KAN/CqC,QAAQC,MAAR,UAAiB1C,EAAKI,GAAtB,uBACO,K,iJCxDX,IAWMuC,EAAmBC,IAAOC,EAAV,KAET,SAAAC,GAAK,OAAKA,EAAMC,cAAgBD,EAAME,KAAO,EAAI,KAO9D,SAASC,EAAoBC,EAAkBC,GAC7C,OAAOD,EACJE,KAAI,SAACC,EAAYC,GAChB,IAAMC,EAAmBC,IAASC,cAAcN,GAC1CO,EAA2BxD,IAAOyD,YAAYJ,EAAnBrD,CAA6BmD,GAC9D,OAAOO,IAAMC,UAAU,CAACR,EAAYK,GAAmB,CAAEI,QAAQ,IAAQV,IAAIW,IAAM/D,SAEpFgE,UAGL,IAkFeC,EAlF6B,SAAC,GAOtB,IANrBf,EAMoB,EANpBA,OACAC,EAKoB,EALpBA,WACAJ,EAIoB,EAJpBA,YACAmB,EAGoB,EAHpBA,cACAC,EAEoB,EAFpBA,YACAC,EACoB,EADpBA,gBACoB,EACoBC,mBAASpB,EAAoBC,EAAQC,IADzD,mBACbmB,EADa,KACCC,EADD,KAEdC,EAAeC,iBAAO,MAE5BC,qBAAU,WACRH,EAAgBtB,EAAoBC,EAAQC,MAC3C,CAACD,EAAQC,IAEZ,IAAMwB,EAAwD,GAM9D,OALAR,EAAYS,SAAQ,SAAAC,GAClB,IAAMjE,OAAwB4B,IAAfqC,EAAIjE,OAAuBiE,EAAIjE,OAAS,GACvD+D,EAAe,GAAD,OAAIE,EAAIpE,MAAR,OAAeG,EAAf,YAAyBiE,EAAIvE,YAAeuE,EAAI/D,SAC7D,IAGD,6BACE,kBAAC,IAAD,CAAYgE,IAAKN,EAAcO,YAAa,CArDjB,OAsD1BT,EAAalB,KAAI,SAAC4B,EAAUC,GAC3B,IAAMC,EAASD,EAAc,EACvBE,EAAuC,IAAXF,EAClC,OAAOD,EAAS5B,KAAI,SAACpD,EAAMoF,GACzB,IAAMC,EACQ,IAAZD,EAAgBE,GC5EN,KD4EoCF,EAAU,IAAyB,GAC7EG,EAAcxF,EAAqBC,GAEnCwF,EAAc,UAAMD,GAAN,OAAoBvF,EAAKa,IAAzB,YAAgCqE,GAC9CO,EAC+B,YAAnCd,EAAea,GACX,QACmC,UAAnCb,EAAea,GACf,MACA,QASN,OACE,kBAAC7C,EAAD,CACEI,YAAaA,EACbC,KAAM2B,EAAepC,eAAeiD,GACpCE,QAX2B,WAG7BlB,EAAamB,QAASC,iBAzED,IAyE4C,CAACtD,EAAwBtC,IAAQ,IAClGoE,EAAgB/D,EAAkBL,EAAMkF,KAQtCW,IAAKT,GAEL,4BACEU,GChGa,IDgGcT,EAC3BU,GCjGa,IDiGcZ,EAC3Ba,EClGa,IDmGbC,KAAM,QACNC,OAAQT,EACRI,IAAG,UAAKX,EAAL,YAAeE,KAElBlB,GAAkBS,EAAepC,eAAeiD,GAChD,0BACEW,ECzGW,IDyGed,EAC1Be,EC1GW,ID0GejB,EAC1BkB,WAAY,SACZH,OAAQT,EACRa,kBAAmB,UACnBC,SAAUC,IAETjB,GAT+D,cE9E5EkB,EAA4B,SAAC,GAAqC,IAAnCrB,EAAkC,EAAlCA,QAASsB,EAAyB,EAAzBA,QACxCC,EAAa,KACbC,EAAY,KA2BhB,MAzBI,CAAC,EAAG,EAAG,EAAG,GAAGC,SAASzB,EAAU,IAClCuB,EAAa,4BAAQb,GAAIgB,IAAmBf,GAAIgB,IAAoBf,EAAG,KAC9DZ,EAAU,KAAO,IAC1BuB,EACE,2BACE,4BAAQb,GAAIgB,IAAmBf,GAAK,IAA0BC,EAAG,KACjE,4BAAQF,GAAIgB,IAAmBf,GAAK,IAA0BC,EAAG,OAKnE,CAAC,EAAG,EAAG,EAAG,EAAG,GAAGa,SAASzB,EAAU,MACrCwB,EACE,0BACET,EAAGW,IACHV,EAAGW,KACHV,WAAY,SACZC,kBAAmB,UACnBC,SD/CqB,KC0CvB,eAOWnB,KAMb,yBAAK4B,GAAE,eAAU5B,GAAWe,EAAGO,EAASR,OAAQ,SAC9C,0BAAMe,MD9DU,IC8DYC,OD7DX,IC6DmCjB,KAAM,QAASkB,YAAa,EAAGjB,OAAQ,UAC3F,0BAAMC,ED/DU,IC+DQc,MAAO,GAAIC,OD9DlB,MC+DhBP,EACAC,IAKDQ,EAA0C,SAAC,GAAkC,IAE3EC,EAF0E,EAA/BnE,OACnBjC,QAAQ+C,UACRZ,KAAI,SAACpD,EAAMsD,GACvC,IAAMgE,EDnEmB,ICmEgC,IAAThE,EAChD,OACE,0BAAMuC,IAAK7F,EAAMmG,EAAG,EAAGC,EAAGkB,EAAkBhB,kBAAmB,UAAWC,SDrEnD,KCsEpBvG,MAKP,OAAO,6BAAMqH,IAqDAE,EAlD6B,SAAC,GAU3C,IAJqB,IALrBrE,EAKoB,EALpBA,OACAC,EAIoB,EAJpBA,WACAe,EAGoB,EAHpBA,cACAC,EAEoB,EAFpBA,YACAC,EACoB,EADpBA,gBAEMoD,ED3Fc,IC2FarE,EDtFJ,GCuFvBsE,EAAQ,GAELC,EAAI,EAAGA,EAAIvE,EAAYuE,GAAK,EACnCD,EAAME,KAAK,kBAAC,EAAD,CAAM9B,IAAG,eAAU6B,EAAI,GAAKtC,QAASsC,EAAI,EAAGhB,QD1F5B,GALT,IC+FuFgB,KAI3G,IADA,IAAME,EAAU,GACPF,EAAI,EAAGA,ED/FK,EC+FeA,GAAK,EAAG,CAC1C,IAAMG,EDlGe,ECkGuB,GAADH,EDhGxB,ECiGnBE,EAAQD,KACN,yBAAK9B,IAAG,iBAAY6B,EAAI,GAAKtB,EAAI,IAAkEsB,GACjG,0BAAMR,OAAQW,EAAgBZ,MAAOO,EAAkBvB,KAAM,QAASC,OAAQ,QAASiB,YAAa,MAK1G,OACE,yBACEW,MAAO,6BACPb,MAAO,GAAK9D,EACZ4E,QAAO,cAASP,EAAmB,IAA2B,EAAvD,YAA4D,OAEnE,kBAAC,EAAD,CAAatE,OAAQA,IACrB,yBAAKiD,EAAG,IAA0BC,ED7GX,KC8GrB,0BAAMY,GAAI,gBAAiBC,MD/GJ,GC+GmCC,ODnH3C,ICmHmEjB,KAAM,UACvFwB,EACAG,GAEH,yBAAKzB,EDlHkB,KCmHrB,kBAAC,EAAD,CACEjD,OAAQA,EACRC,WAAYA,EACZJ,aAAa,EACbmB,cAAeA,EACfC,YAAaA,EACbC,gBAAiBA,OC/EZ4D,MA5Cf,SAAkBC,GAA+C,IAApBC,EAAmB,0DACpB7D,mBAAqC,IAApB4D,GADG,mBACvDE,EADuD,KACxCC,EADwC,OAE1B/D,mBAAwB,MAFE,mBAEvDgE,EAFuD,KAE3CC,EAF2C,KAI9D,SAASC,IACP,IAAIC,EAAQC,KAAKC,MAEjBJ,EACEK,aAAY,WACV,IAAMD,EAAMD,KAAKC,MACXE,EAAKF,EAAMF,EACjBJ,GAAiB,SAAAD,GAAa,OAAKA,EAAgBS,GAAM,EAAI,EAAIT,EAAgBS,KACjFJ,EAAQE,IAdC,MA+Bf,OAZAhE,qBAAU,WAKR,OAJIwD,GACFK,IAGK,WACDF,GACFQ,cAAcR,MAGjB,IAEI,CACLjH,QAASE,KAAKwH,KAAKX,EAAgB,KACnCY,OAAQ,WACNR,KAEFS,MAAO,WACDX,IACFQ,cAAcR,GACdC,EAAc,QAGlBW,QAAS,kBAAMb,EAAiBH,M,wpBCjCpC,IAAMiB,EAAkB,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,MA+DvD,IAAMC,EAAgBvG,IAAOwG,IAAV,KAKbC,EAAYzG,IAAO0G,GAAV,KAETC,EAAc3G,IAAOwG,IAAV,KAGI,SAAAtG,GAAK,OAAKA,EAAM0G,SAAW,SAAW,mBAKrDC,EAAyB7G,IAAO8G,GAAV,KAItBC,EAA2E,SAAC,GAM3E,IALLC,EAKI,EALJA,MACAC,EAII,EAJJA,QAKA,OACE,6BACE,kBAACJ,EAAD,KAAyBG,GACzB,6BAAMC,KAKNC,EAAiBlH,IAAOmH,OAAV,KAoJLC,EA3ImB,WAAO,IAAD,EACE3F,mBAAiB,KADnB,mBAC/B4F,EAD+B,KACjBC,EADiB,OAEN7F,mBAAsB,IAFhB,mBAE/B8F,EAF+B,KAErBC,EAFqB,KAGtC1F,qBAAU,WACR,IAAMuF,EA3GV,WAkCE,IAjCA,IAAMI,EAAyC,CAC7ClI,EAAG,EACH,QAAS,EACTE,EAAG,EACHX,EAAG,EACH,QAAS,EACTE,EAAG,EACH,QAAS,EACTE,EAAG,EACHC,EAAG,EACH,QAAS,EACTE,EAAG,EACH,QAAS,GAGLqI,EAAgBC,OAAOC,OAAOH,GAAaI,QAAO,SAACxK,EAAK4E,GAAN,OAAeA,EAAM5E,EAAM4E,EAAM5E,IAAM,GACzFyK,EAAuBH,OAAOI,QAAQN,GAAaI,QAAO,SAACxK,EAAD,GAAiD,IAAD,mBAAd4F,EAAc,KAAT+E,EAAS,KAE9G,OADA3K,EAAI4F,GAAOyE,EAAgBM,EACpB3K,IACN,IAEG4K,EAAU,IAAIpC,KACdqC,EAASC,IAAWF,EAAQG,sBAAsBC,QAElDC,EAAWtH,IAAMC,UAAU,CAAC,KAAM,MAAO,CAAEC,QAAQ,IAAQV,KAAI,SAAA+H,GACnE,OAAOpL,EAAqBgE,IAAM/D,KAAKmL,OAInCC,EAAkCb,OAAOC,OAAOE,GAAsBD,QAAO,SAACxK,EAAKoL,GAAN,OAAiBpL,EAAMoL,IAAQ,GAC9G3D,EAAI,EACJzH,EAAM,EAEHA,EAAMyK,EAAqBQ,EAASxD,IAAM0D,EAA0BN,GACzE7K,GAAOyK,EAAqBQ,EAASxD,IAAM0D,EAC3C1D,GAAK,EAGP,OAAOwD,EAASxD,GAoEO4D,GACrBpB,EAAgBD,GAChBG,EAnEJ,SAA0BpK,EAAckD,EAAkBC,GACxD,IAAMgH,EAAwB,GACxBoB,EAAwC,IAA3BvL,EAAKwL,MAAM,KAAKC,OAAezL,EAAKwL,MAAM,KAAK,GAAKxL,EAavE,OAXAkD,EAAO0B,SAAQ,SAAC8G,EAAYpI,GAI1B,IAHA,IAAMhD,EAAY,EAAIgD,EAClBqI,EAAoB5H,IAAMR,SAASQ,IAAM6H,SAASF,EAAYH,IAAaM,eAElDrJ,IAAtBmJ,GAAmCA,GAAqBxI,GAAY,CACzE,IAAM2I,EAAW/H,IAAM/D,KAAK+D,IAAMgI,UAAUL,EAAYlI,IAASC,cAAckI,KAC/ExB,EAASxC,KAAKtH,EAAkByL,EAAUxL,IAC1CqL,GAAqB,OAIlBxB,EAAS6B,OAAO7B,EAASlJ,MAAM,EAAGkJ,EAASsB,OAAS,GAAGzH,WAoDhDiI,CAAiBhC,EAAcf,EA/G1B,OAgHhB,IAPmC,MASE7E,oBAAkB,GATpB,mBAS/B6H,EAT+B,KASjBC,EATiB,OAUA9H,mBAAiB,GAVjB,mBAU/B+H,EAV+B,KAUlBC,EAVkB,OAYMrE,EAAS,KAA7C5G,EAZ8B,EAY9BA,QAAS4H,EAZqB,EAYrBA,MAAOD,EAZc,EAYdA,OAZc,KAYNE,QAEM5E,mBAAsB,KAdtB,mBAc/BF,EAd+B,KAclBmI,EAdkB,OAiBQjI,oBAAkB,GAjB1B,mBAiB/BkI,EAjB+B,KAiBdC,EAjBc,KAkBtC9H,qBAAU,WACY,IAAhB0H,GACFI,GAAmB,SAAA5B,GAAG,OAAIA,EAAM,OAEjC,CAACwB,IAtBkC,MAwBc/H,mBAKjD,CACDoI,WAAY,EACZC,aAAc,EACdC,SAAU,KACVC,aAAc,IAjCsB,mBAwB/BC,EAxB+B,KAwBXC,EAxBW,KAmCtCpI,qBAAU,WACR,IAAMqI,EAAwBxC,OAAOyC,OAAO,GAAIH,GAEhD,GAAIX,EAEF,GAAoC,OAAhCW,EAAmBF,SAErBI,EAAsBJ,SAAWlE,KAAKC,MAAQmE,EAAmBD,aACjEG,EAAsBH,aAAe,MAChC,CAAC,IACEH,EAAuCI,EAAvCJ,WAAYC,EAA2BG,EAA3BH,aAAcC,EAAaE,EAAbF,SAElCI,EAAsBN,YAAcA,EAAaC,EAAejE,KAAKC,MAAQiE,IAAaD,EAAe,GACzGK,EAAsBL,aAAeA,EAAe,EACpDK,EAAsBJ,SAAWlE,KAAKC,MACtCqE,EAAsBH,aAAe,OAInCC,EAAmBF,WAErBI,EAAsBH,aAAenE,KAAKC,MAAQmE,EAAmBF,SACrEI,EAAsBJ,SAAW,MAIrCG,EAAsBC,KACrB,CAACX,EAAaF,IA9DqB,MAgEV7H,mBAAiB,GAhEP,mBAgE/B4I,EAhE+B,KAgEvBC,EAhEuB,KAsGtC,OArCAxI,qBAAU,WACJP,EAAYsH,OAAS,GACvByB,GAAU,SAAAC,GAAW,OAAIA,EAAc,OAExC,CAAChJ,IAkCF,kBAACgF,EAAD,KACE,kBAACE,EAAD,+BACA,kBAACE,EAAD,KACE,kBAAC,EAAD,CACEK,MAAM,eACNC,QAAO,2BAAsBI,EAAtB,gQAKX,kBAACV,EAAD,KACE,kBAAC,EAAD,CAAmBK,MAAM,iBAAiBC,QAASI,IACnD,kBAAC,EAAD,CAAmBL,MAAM,QAAQC,QAAS3I,EAAgBE,KAC1D,kBAAC,EAAD,CAAmBwI,MAAM,SAASC,QAAS0C,IAC3C,kBAAC,EAAD,CACE3C,MAAM,oBACNC,QAASgD,EAAmBJ,WAAnB,UAAmCnL,KAAKwH,KAAK+D,EAAmBJ,YAAhE,MAAkF,QAE7F,kBAAC,EAAD,CAAmB7C,MAAM,SAASC,QAASoD,KAE7C,kBAAC1D,EAAD,CAAaC,UAAQ,GACnB,kBAAC,EAAD,CACEtG,OAAQgG,EACR/F,WAvOW,GAwOXe,eAAgBgI,EAChB/H,YAAaA,EACbC,gBA1DR,SAAyBgJ,GACvB,GAAIlB,EAAc,CAChB,IAAMmB,EAAuBlD,EAASiC,GAChCkB,EAAkBjN,EACtB0D,IAAM/D,KAAKoN,EAAU1M,UACrB0M,EAAU9M,UACV+M,GAEIlJ,EAAc,CAACmJ,GAEU,UAA3BA,EAAgBxM,QAClBqD,EAAYwD,KAAK0F,GAGnBf,EAAenI,GACfkI,GAAe,SAAAkB,GAAG,OAAKA,EAAM,GAAKpD,EAASsB,eA8C3C,kBAAClC,EAAD,CAAaC,UAAU,GACrB,kBAACM,EAAD,CAAgBpE,QA3CtB,WACMwG,EAEFlD,IAGAD,IAGFoD,GAAgB,SAAAqB,GAAE,OAAKA,OAkC6BtB,EAAe,QAAU,YC7OlEuB,G,MARH,WACV,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,SCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4849750e.chunk.js","sourcesContent":["import { NoNote, Note } from '@tonaljs/modules/dist/tonal';\nimport { Note as asNote } from '@tonaljs/modules';\nimport { NoteInput } from '../components/fretboard/interfaces';\n\nconst formatEnharmonicNote = (note: Note | NoNote) => {\n  if (note.acc === 'b') {\n    return `${asNote.enharmonic(note.pc)}/${note.pc}`;\n  }\n  if (note.acc === '#') {\n    return `${note.pc}/${asNote.enharmonic(note.pc)}`;\n  }\n  return note.pc;\n};\n\nconst generateNoteInput = (\n  note: Note | NoNote,\n  stringNum: number,\n  compareNoteInput: NoteInput | null = null,\n): NoteInput => {\n  const result: NoteInput = {\n    name: formatEnharmonicNote(note),\n    baseName: note.name,\n    freq: note.freq,\n    octave: note.oct,\n    stringNum: stringNum,\n  };\n\n  if (compareNoteInput !== null) {\n    result.status =\n      result.name === compareNoteInput.name &&\n      result.stringNum === compareNoteInput.stringNum &&\n      result.octave === compareNoteInput.octave\n        ? 'correct'\n        : 'error';\n  }\n\n  return result;\n};\n\nfunction pad(num: number): string {\n  return ('0' + num).slice(-2);\n}\n\nconst convertToHHMMSS = (secs: number) => {\n  const seconds = secs % 60;\n  const minutes = Math.floor(secs / 60) % 60;\n  const hours = Math.floor(secs / 3600);\n  return `${hours > 0 ? (hours >= 100 ? `${hours}:` : `${pad(hours)}:`) : ''}${pad(minutes)}:${pad(seconds)}`;\n};\n\nconst MIDI_SOUND_SCALE_MAP: { [note: string]: number } = {\n  C: 0,\n  'C#': 1,\n  Db: 1,\n  D: 2,\n  'D#': 3,\n  Eb: 3,\n  E: 4,\n  F: 5,\n  'F#': 6,\n  Gb: 6,\n  G: 7,\n  'G#': 8,\n  Ab: 8,\n  A: 9,\n  'A#': 10,\n  Bb: 10,\n  B: 11,\n};\n\nconst getMIDISoundPitchNumber = (note: Note): number => {\n  if (!MIDI_SOUND_SCALE_MAP.hasOwnProperty(note.pc)) {\n    console.error(`${note.pc} not found in map.`);\n    return 36; // return middle C by default\n  } else if (note.oct === null || note.oct === undefined) {\n    console.error('Octave not found on note.');\n    return 36; // return middle C by default\n  }\n  return 12 * note.oct + MIDI_SOUND_SCALE_MAP[note.pc];\n};\n\nexport { formatEnharmonicNote, generateNoteInput, convertToHHMMSS, getMIDISoundPitchNumber };\n","import React, { useState, useEffect, useRef } from 'react';\nimport { Tonal, Range, Interval, Note as asNote } from '@tonaljs/modules';\nimport styled from 'styled-components';\n// eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n// @ts-ignore\nimport MIDISounds from 'midi-sounds-react';\n\nimport { NoteInput } from './interfaces';\nimport { formatEnharmonicNote, generateNoteInput, getMIDISoundPitchNumber } from '../../util/helpers';\nimport {\n  FRET_VB_WIDTH,\n  FRET_VB_HEIGHT,\n  NUM_OF_STRINGS,\n  FRETBOARD_TOP_VB_WIDTH,\n  FRETBOARD_VB_PADDING,\n} from './constants';\n\nconst MIDI_SOUND_GUITAR_NUMBER = 263;\n\ninterface NoteLabelProps {\n  tuning: string[];\n  numOfFrets: number;\n  showOnHover: boolean;\n  showLabelText: boolean;\n  notesToShow: NoteInput[];\n  handleNoteClick(note: NoteInput): void;\n}\n\nconst StyledLabelGroup = styled.g<{ showOnHover: boolean; show: boolean }>`\n  cursor: pointer;\n  opacity: ${props => (props.showOnHover && !props.show ? 0 : 1)};\n\n  &:hover {\n    opacity: 1;\n  }\n`;\n\nfunction createTonalNotesMap(tuning: string[], numOfFrets: number) {\n  return tuning\n    .map((stringNote, tuningIdx) => {\n      const interval: string = Interval.fromSemitones(numOfFrets);\n      const lastNoteOnString: string = asNote.transposeBy(interval)(stringNote);\n      return Range.chromatic([stringNote, lastNoteOnString], { sharps: true }).map(Tonal.note);\n    })\n    .reverse();\n}\n\nconst NoteLabel: React.FC<NoteLabelProps> = ({\n  tuning,\n  numOfFrets,\n  showOnHover,\n  showLabelText,\n  notesToShow,\n  handleNoteClick,\n}: NoteLabelProps) => {\n  const [noteLabelMap, setNoteLabelMap] = useState(createTonalNotesMap(tuning, numOfFrets));\n  const refContainer = useRef(null);\n\n  useEffect(() => {\n    setNoteLabelMap(createTonalNotesMap(tuning, numOfFrets));\n  }, [tuning, numOfFrets]);\n\n  const notesToShowMap: { [key: string]: string | undefined } = {};\n  notesToShow.forEach(cur => {\n    const octave = cur.octave !== undefined ? cur.octave : '';\n    notesToShowMap[`${cur.name}${octave}-${cur.stringNum}`] = cur.status;\n  }, {});\n\n  return (\n    <svg>\n      <MIDISounds ref={refContainer} instruments={[MIDI_SOUND_GUITAR_NUMBER]} />\n      {noteLabelMap.map((strNotes, strNotesIdx) => {\n        const strNum = strNotesIdx + 1; // strings are 1-indexed\n        const labelVBPositionCy: number = strNotesIdx * (FRET_VB_HEIGHT / (NUM_OF_STRINGS - 1));\n        return strNotes.map((note, fretNum) => {\n          const labelVBPositionCx: number =\n            fretNum === 0 ? FRETBOARD_TOP_VB_WIDTH / 2 : (fretNum - 1 / 2) * FRET_VB_WIDTH + 20;\n          const noteDisplay = formatEnharmonicNote(note);\n\n          const notesToShowKey = `${noteDisplay}${note.oct}-${strNum}`;\n          const labelColor =\n            notesToShowMap[notesToShowKey] === 'correct'\n              ? 'green'\n              : notesToShowMap[notesToShowKey] === 'error'\n              ? 'red'\n              : 'black';\n\n          const handleNoteClickWrapper = () => {\n            // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n            // @ts-ignore\n            refContainer.current!.playStrumDownNow(MIDI_SOUND_GUITAR_NUMBER, [getMIDISoundPitchNumber(note)], 0.5);\n            handleNoteClick(generateNoteInput(note, strNum));\n          };\n\n          return (\n            <StyledLabelGroup\n              showOnHover={showOnHover}\n              show={notesToShowMap.hasOwnProperty(notesToShowKey)}\n              onClick={handleNoteClickWrapper}\n              key={fretNum}\n            >\n              <circle\n                cx={FRETBOARD_VB_PADDING + labelVBPositionCx}\n                cy={FRETBOARD_VB_PADDING + labelVBPositionCy}\n                r={FRETBOARD_VB_PADDING}\n                fill={'white'}\n                stroke={labelColor}\n                key={`${strNum}-${fretNum}`}\n              />\n              {!showLabelText && !notesToShowMap.hasOwnProperty(notesToShowKey) ? null : (\n                <text\n                  x={FRETBOARD_VB_PADDING + labelVBPositionCx}\n                  y={FRETBOARD_VB_PADDING + labelVBPositionCy}\n                  textAnchor={'middle'}\n                  stroke={labelColor}\n                  alignmentBaseline={'central'}\n                  fontSize={FRETBOARD_VB_PADDING * (3 / 4)}\n                >\n                  {noteDisplay}\n                </text>\n              )}\n            </StyledLabelGroup>\n          );\n        });\n      })}\n    </svg>\n  );\n};\n\nexport default NoteLabel;\n","const FRET_VB_WIDTH = 400;\nconst FRET_VB_HEIGHT = 1000;\nconst MIN_STRING_WIDTH = 8;\nconst MAX_STRING_WIDTH = 20;\nconst NUM_OF_STRINGS = 6;\nconst FRETBOARD_TOP_VB_WIDTH = 20;\nconst FRETBOARD_VB_PADDING = 100;\n\nexport {\n  FRET_VB_WIDTH,\n  FRET_VB_HEIGHT,\n  MIN_STRING_WIDTH,\n  MAX_STRING_WIDTH,\n  NUM_OF_STRINGS,\n  FRETBOARD_TOP_VB_WIDTH,\n  FRETBOARD_VB_PADDING,\n};\n","import React from 'react';\nimport NoteLabel from './NoteLabel';\n\nimport { NoteInput } from './interfaces';\nimport {\n  FRET_VB_WIDTH,\n  FRET_VB_HEIGHT,\n  MIN_STRING_WIDTH,\n  MAX_STRING_WIDTH,\n  NUM_OF_STRINGS,\n  FRETBOARD_TOP_VB_WIDTH,\n  FRETBOARD_VB_PADDING,\n} from './constants';\n\ninterface FretProps {\n  fretNum: number;\n  xOffset: number;\n}\n\ninterface TuningLabelProps {\n  tuning: string[];\n}\n\ninterface FretboardProps {\n  tuning: string[];\n  numOfFrets: number;\n  showLabelText: boolean;\n  notesToShow: NoteInput[];\n  handleNoteClick(note: NoteInput): void;\n}\n\nconst Fret: React.FC<FretProps> = ({ fretNum, xOffset }: FretProps) => {\n  let fretMarker = null;\n  let fretLabel = null;\n\n  if ([3, 5, 7, 9].includes(fretNum % 12)) {\n    fretMarker = <circle cx={FRET_VB_WIDTH / 2} cy={FRET_VB_HEIGHT / 2} r={50} />;\n  } else if (fretNum % 12 === 0) {\n    fretMarker = (\n      <g>\n        <circle cx={FRET_VB_WIDTH / 2} cy={(3 / 10) * FRET_VB_HEIGHT} r={50} />\n        <circle cx={FRET_VB_WIDTH / 2} cy={(7 / 10) * FRET_VB_HEIGHT} r={50} />\n      </g>\n    );\n  }\n\n  if ([0, 3, 5, 7, 9].includes(fretNum % 12)) {\n    fretLabel = (\n      <text\n        x={FRET_VB_WIDTH / 2}\n        y={FRET_VB_HEIGHT + FRETBOARD_VB_PADDING}\n        textAnchor={'middle'}\n        alignmentBaseline={'central'}\n        fontSize={FRETBOARD_VB_PADDING}\n      >\n        {`fret ${fretNum}`}\n      </text>\n    );\n  }\n\n  return (\n    <svg id={`fret-${fretNum}`} x={xOffset} stroke={'black'}>\n      <rect width={FRET_VB_WIDTH} height={FRET_VB_HEIGHT} fill={'white'} strokeWidth={1} stroke={'black'} />\n      <rect x={FRET_VB_WIDTH} width={10} height={FRET_VB_HEIGHT} />\n      {fretMarker}\n      {fretLabel}\n    </svg>\n  );\n};\n\nconst TuningLabel: React.FC<TuningLabelProps> = ({ tuning }: TuningLabelProps) => {\n  const reversedTuning = tuning.slice().reverse();\n  const labels = reversedTuning.map((note, tuningIdx) => {\n    const labelVBPositionY = FRETBOARD_VB_PADDING + tuningIdx * (FRET_VB_HEIGHT / (NUM_OF_STRINGS - 1));\n    return (\n      <text key={note} x={0} y={labelVBPositionY} alignmentBaseline={'central'} fontSize={FRETBOARD_VB_PADDING}>\n        {note}\n      </text>\n    );\n  });\n\n  return <svg>{labels}</svg>;\n};\n\nconst Fretboard: React.FC<FretboardProps> = ({\n  tuning,\n  numOfFrets,\n  showLabelText,\n  notesToShow,\n  handleNoteClick,\n}: FretboardProps) => {\n  const fretboardVBWidth: number = numOfFrets * FRET_VB_WIDTH + FRETBOARD_TOP_VB_WIDTH;\n  const frets = [];\n\n  for (let i = 0; i < numOfFrets; i += 1) {\n    frets.push(<Fret key={`fret-${i + 1}`} fretNum={i + 1} xOffset={FRETBOARD_TOP_VB_WIDTH + FRET_VB_WIDTH * i} />);\n  }\n\n  const strings = [];\n  for (let i = 0; i < NUM_OF_STRINGS; i += 1) {\n    const curStringWidth = MIN_STRING_WIDTH + (i * (MAX_STRING_WIDTH - MIN_STRING_WIDTH)) / NUM_OF_STRINGS;\n    strings.push(\n      <svg key={`string-${i + 1}`} y={((FRET_VB_HEIGHT - 1 * MAX_STRING_WIDTH) / (NUM_OF_STRINGS - 1)) * i}>\n        <rect height={curStringWidth} width={fretboardVBWidth} fill={'white'} stroke={'black'} strokeWidth={2} />\n      </svg>,\n    );\n  }\n\n  return (\n    <svg\n      xmlns={'http://www.w3.org/2000/svg'}\n      width={80 * numOfFrets}\n      viewBox={`0 0 ${fretboardVBWidth + 3 * FRETBOARD_VB_PADDING + 1} ${1000 + 3 * FRETBOARD_VB_PADDING + 1}`}\n    >\n      <TuningLabel tuning={tuning} />\n      <svg x={2 * FRETBOARD_VB_PADDING} y={FRETBOARD_VB_PADDING}>\n        <rect id={'fretboard-top'} width={FRETBOARD_TOP_VB_WIDTH} height={FRET_VB_HEIGHT} fill={'black'} />\n        {frets}\n        {strings}\n      </svg>\n      <svg x={FRETBOARD_VB_PADDING}>\n        <NoteLabel\n          tuning={tuning}\n          numOfFrets={numOfFrets}\n          showOnHover={true}\n          showLabelText={showLabelText}\n          notesToShow={notesToShow}\n          handleNoteClick={handleNoteClick}\n        />\n      </svg>\n    </svg>\n  );\n};\n\nexport default Fretboard;\n","import { useState, useEffect } from 'react';\n\nconst INTERVAL = 500;\n\nfunction useTimer(initTimeRemaining: number, autoStart = false) {\n  const [timeRemaining, setTimeRemaining] = useState<number>(initTimeRemaining * 1000);\n  const [intervalId, setIntervalId] = useState<null | number>(null);\n\n  function setupInterval() {\n    let start = Date.now();\n\n    setIntervalId(\n      setInterval(() => {\n        const now = Date.now();\n        const dt = now - start;\n        setTimeRemaining(timeRemaining => (timeRemaining - dt <= 0 ? 0 : timeRemaining - dt));\n        start = now;\n      }, INTERVAL),\n    );\n  }\n\n  useEffect(() => {\n    if (autoStart) {\n      setupInterval();\n    }\n\n    return () => {\n      if (intervalId) {\n        clearInterval(intervalId);\n      }\n    };\n  }, []);\n\n  return {\n    seconds: Math.ceil(timeRemaining / 1000),\n    resume: () => {\n      setupInterval();\n    },\n    pause: () => {\n      if (intervalId) {\n        clearInterval(intervalId);\n        setIntervalId(null);\n      }\n    },\n    restart: () => setTimeRemaining(initTimeRemaining),\n  };\n}\n\nexport default useTimer;\n","import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport seedrandom from 'seedrandom';\nimport { Tonal, Range, Interval } from '@tonaljs/modules';\nimport { NoteInput } from '../components/fretboard/interfaces';\n\nimport Fretboard from '../components/fretboard/Fretboard';\nimport useTimer from '../hooks/useTimer';\n\nimport { formatEnharmonicNote, generateNoteInput, convertToHHMMSS } from '../util/helpers';\n\nconst STANDARD_TUNING = ['E2', 'A2', 'D3', 'G3', 'B3', 'E4'];\nconst NUM_OF_FRETS = 19;\n\nfunction pickNoteForToday(): string {\n  const exampleTest: { [key: string]: number } = {\n    A: 3,\n    'A#/Bb': 2,\n    B: 4,\n    C: 2,\n    'C#/Db': 1,\n    D: 4,\n    'D#/Eb': 3,\n    E: 2,\n    F: 2,\n    'F#/Gb': 5,\n    G: 3,\n    'G#/Ab': 2,\n  };\n\n  const maxOccurrence = Object.values(exampleTest).reduce((acc, cur) => (cur > acc ? cur : acc), 1);\n  const inverseOccurrenceMap = Object.entries(exampleTest).reduce((acc: { [key: string]: number }, [key, val]) => {\n    acc[key] = maxOccurrence - val;\n    return acc;\n  }, {});\n\n  const curDate = new Date();\n  const rngVal = seedrandom(curDate.toLocaleDateString()).quick();\n\n  const allNotes = Range.chromatic(['C3', 'B3'], { sharps: true }).map(noteWithOctave => {\n    return formatEnharmonicNote(Tonal.note(noteWithOctave));\n  });\n\n  // add 1 in case the object contains all zeroes\n  const totalExercisesCompleted: number = Object.values(inverseOccurrenceMap).reduce((acc, curVal) => acc + curVal, 0);\n  let i = 0;\n  let acc = 0;\n\n  while (acc + inverseOccurrenceMap[allNotes[i]] / totalExercisesCompleted < rngVal) {\n    acc += inverseOccurrenceMap[allNotes[i]] / totalExercisesCompleted;\n    i += 1;\n  }\n\n  return allNotes[i];\n}\n\nfunction generateExercise(note: string, tuning: string[], numOfFrets: number) {\n  const exercise: NoteInput[] = [];\n  const parsedNote = note.split('/').length === 2 ? note.split('/')[0] : note;\n\n  tuning.forEach((tuningNote, tuningIdx) => {\n    const stringNum = 6 - tuningIdx;\n    let semitonesFromNote = Tonal.interval(Tonal.distance(tuningNote, parsedNote)).semitones;\n\n    while (semitonesFromNote !== undefined && semitonesFromNote <= numOfFrets) {\n      const nextNote = Tonal.note(Tonal.transpose(tuningNote, Interval.fromSemitones(semitonesFromNote)));\n      exercise.push(generateNoteInput(nextNote, stringNum));\n      semitonesFromNote += 12; // get next octave for the note\n    }\n  });\n\n  return exercise.concat(exercise.slice(1, exercise.length - 1).reverse());\n}\n\nconst PageContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 16px;\n`;\nconst PageTitle = styled.h1``;\n\nconst ExerciseRow = styled.div<{ centered?: boolean }>`\n  width: 100%;\n  display: flex;\n  justify-content: ${props => (props.centered ? 'center' : 'space-between')};\n  text-align: left;\n  padding: 16px 0;\n`;\n\nconst ExerciseInfoEntryTitle = styled.h3`\n  margin: 0 0 8px 0;\n`;\n\nconst ExerciseInfoEntry: React.FC<{ title: string; content: string | number }> = ({\n  title,\n  content,\n}: {\n  title: string;\n  content: string | number;\n}) => {\n  return (\n    <div>\n      <ExerciseInfoEntryTitle>{title}</ExerciseInfoEntryTitle>\n      <div>{content}</div>\n    </div>\n  );\n};\n\nconst ExerciseButton = styled.button`\n  padding: 8px 16px;\n  border-radius: 8px;\n  font-size: 24px;\n  outline: none;\n  width: fit-content;\n  cursor: pointer;\n`;\n\nconst OneNoteADay: React.FC<{}> = () => {\n  const [noteForToday, setNoteForToday] = useState<string>('C');\n  const [exercise, setExercise] = useState<NoteInput[]>([]);\n  useEffect(() => {\n    const noteForToday = pickNoteForToday();\n    setNoteForToday(noteForToday);\n    setExercise(generateExercise(noteForToday, STANDARD_TUNING, NUM_OF_FRETS));\n  }, []);\n\n  const [exerciseMode, setExerciseMode] = useState<boolean>(false);\n  const [exerciseIdx, setExerciseIdx] = useState<number>(0);\n\n  const { seconds, pause, resume, restart } = useTimer(600);\n\n  const [notesToShow, setNotesToShow] = useState<NoteInput[]>([]);\n\n  // analytics\n  const [roundsCompleted, setRoundsCompleted] = useState<number>(-1);\n  useEffect(() => {\n    if (exerciseIdx === 0) {\n      setRoundsCompleted(val => val + 1);\n    }\n  }, [exerciseIdx]);\n\n  const [avgResponseTimeObj, setAvgResponseTimeObj] = useState<{\n    runningAvg: number;\n    totalAnswers: number;\n    prevTime: null | number;\n    bufferedTime: number;\n  }>({\n    runningAvg: 0,\n    totalAnswers: 0,\n    prevTime: null,\n    bufferedTime: 0,\n  });\n  useEffect(() => {\n    const newAvgResponseTimeObj = Object.assign({}, avgResponseTimeObj);\n\n    if (exerciseMode) {\n      // toggled start or input a note\n      if (avgResponseTimeObj.prevTime === null) {\n        // toggled start\n        newAvgResponseTimeObj.prevTime = Date.now() - avgResponseTimeObj.bufferedTime;\n        newAvgResponseTimeObj.bufferedTime = 0;\n      } else {\n        const { runningAvg, totalAnswers, prevTime } = avgResponseTimeObj;\n        // input a note; calculate new running avg and set state for next calculation\n        newAvgResponseTimeObj.runningAvg = (runningAvg * totalAnswers + Date.now() - prevTime) / (totalAnswers + 1);\n        newAvgResponseTimeObj.totalAnswers = totalAnswers + 1;\n        newAvgResponseTimeObj.prevTime = Date.now();\n        newAvgResponseTimeObj.bufferedTime = 0;\n      }\n    } else {\n      // initial call or paused\n      if (avgResponseTimeObj.prevTime) {\n        // paused since prev time will be set if paused\n        newAvgResponseTimeObj.bufferedTime = Date.now() - avgResponseTimeObj.prevTime!;\n        newAvgResponseTimeObj.prevTime = null;\n      }\n    }\n\n    setAvgResponseTimeObj(newAvgResponseTimeObj);\n  }, [exerciseIdx, exerciseMode]);\n\n  const [errors, setErrors] = useState<number>(0);\n  useEffect(() => {\n    if (notesToShow.length > 1) {\n      setErrors(numOfErrors => numOfErrors + 1);\n    }\n  }, [notesToShow]);\n\n  function handleNoteInput(noteInput: NoteInput) {\n    if (exerciseMode) {\n      const curExerciseNoteInput = exercise[exerciseIdx];\n      const gradedNoteInput = generateNoteInput(\n        Tonal.note(noteInput.baseName),\n        noteInput.stringNum,\n        curExerciseNoteInput,\n      );\n      const notesToShow = [gradedNoteInput];\n\n      if (gradedNoteInput.status === 'error') {\n        notesToShow.push(curExerciseNoteInput);\n      }\n\n      setNotesToShow(notesToShow);\n      setExerciseIdx(idx => (idx + 1) % exercise.length);\n    }\n  }\n\n  function handleExerciseToggle() {\n    if (exerciseMode) {\n      // toggling to exerciseMode off\n      pause();\n    } else {\n      // toggling to exerciseMode on\n      resume();\n    }\n\n    setExerciseMode(em => !em);\n  }\n\n  return (\n    <PageContainer>\n      <PageTitle>Fretboard Memorization</PageTitle>\n      <ExerciseRow>\n        <ExerciseInfoEntry\n          title=\"Instructions\"\n          content={`Identify all the ${noteForToday}'s, starting with the lowest string. Find all instances\n            of the note on each string before moving up to the next string higher up. After finishing with the highest\n            string, continue to identify notes but in the reverse order.`}\n        />\n      </ExerciseRow>\n      <ExerciseRow>\n        <ExerciseInfoEntry title=\"Note For Today\" content={noteForToday} />\n        <ExerciseInfoEntry title=\"Timer\" content={convertToHHMMSS(seconds)} />\n        <ExerciseInfoEntry title=\"Rounds\" content={roundsCompleted} />\n        <ExerciseInfoEntry\n          title=\"Avg Response Time\"\n          content={avgResponseTimeObj.runningAvg ? `${Math.ceil(avgResponseTimeObj.runningAvg)}ms` : 'N/A'}\n        />\n        <ExerciseInfoEntry title=\"Errors\" content={errors} />\n      </ExerciseRow>\n      <ExerciseRow centered>\n        <Fretboard\n          tuning={STANDARD_TUNING}\n          numOfFrets={NUM_OF_FRETS}\n          showLabelText={!exerciseMode}\n          notesToShow={notesToShow}\n          handleNoteClick={handleNoteInput}\n        />\n      </ExerciseRow>\n      <ExerciseRow centered={true}>\n        <ExerciseButton onClick={handleExerciseToggle}>{exerciseMode ? 'Pause' : 'Start'}</ExerciseButton>\n      </ExerciseRow>\n    </PageContainer>\n  );\n};\n\nexport default OneNoteADay;\n","import React from 'react';\nimport logo from './logo.svg';\nimport OneNoteADay from './features/OneNoteADay';\nimport './App.css';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <OneNoteADay></OneNoteADay>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}